import numpy as np

def A_n(n, L, d, h):
    num = 2*h*L**2
    den = np.pi**2 * n**2 * d * (L-d)
    A = (num/den) * np.sin((n*np.pi*d)/L)
    
    return A

def f_n(n, frec, b):
	f = n*frec* np.sqrt(1+b**2*n**2)

	return f

def list_sounds(conditions, vol, octave, precision, time):
	'''
	conditions: List with longitude(L), distance(d), height(h), stiffnes(b), damping(gamma)
	vol: Volume (Float)
	octave: Int with octave with 0 starting in C2
	presicion: Int with the precision in the sum of harmonics
	time: Time in seconds (float) of each sound
	'''
	sounds = []

	dt = 50e-6  #1/dt = fs =20kHz
	t = np.arange(0,time,dt)

	frecs = [[65.41, 69.2994810020415, 73.42024257991609, 77.78603739232798, 82.41143587362365, 87.31187486126194, 92.50370911482415, 98.00426589850373, 103.83190280923992, 110.00606904349092, 116.54737030711918, 123.47763758501914, 130.82, 138.598962004083, 146.84048515983218, 155.57207478465597, 164.8228717472473],
            [130.82, 138.598962004083, 146.84048515983218, 155.57207478465597, 164.8228717472473, 174.62374972252388, 185.0074182296483, 196.00853179700746, 207.66380561847984, 220.01213808698185, 233.09474061423836, 246.95527517003828, 261.64, 277.197924008166, 293.68097031966437, 311.14414956931194, 329.6457434944946],
            [261.63, 277.18732937722245, 293.66974569918125, 311.1322574981619, 329.63314428399565, 349.2341510465061, 370.00069432367286, 392.0020805232462, 415.31173722644, 440.00745824565865, 466.1716632541139, 493.89167285382297, 523.26, 554.3746587544449, 587.3394913983625, 622.2645149963238, 659.2662885679913],
            [523.26, 554.3746587544449, 587.3394913983625, 622.2645149963238, 659.2662885679913, 698.4683020930122, 740.0013886473457, 784.0041610464924, 830.62347445288, 880.0149164913173, 932.3433265082278, 987.7833457076459, 1046.52, 1108.7493175088898, 1174.678982796725, 1244.5290299926476, 1318.5325771359826]]

	for f in frecs[octave]:
		audio = 0
		for n in range(1,precision):
			audio += A_n(n, conditions[0], conditions[1], conditions[2]) * np.cos(2*np.pi * f_n(n, f, conditions[3])*t) * np.exp(-n*conditions[4]*t)

		sounds.append(audio * vol)

	return sounds
